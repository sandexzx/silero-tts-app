// –ü—É—Ç—å: /home/zverev/sandbox/Electron/silero-tts-app/frontend/renderer/scripts/app.js
document.addEventListener('DOMContentLoaded', () => {
    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const statusDot = document.querySelector('.status-dot');
    const statusText = document.getElementById('status-text');
    const speakerSelect = document.getElementById('speaker-select');
    const sampleRateSelect = document.getElementById('sample-rate-select');
    const textInput = document.getElementById('text-input');
    const ssmlInput = document.getElementById('ssml-input');
    const synthesizeBtn = document.getElementById('synthesize-btn');
    const clearBtn = document.getElementById('clear-btn');
    const saveBtn = document.getElementById('save-btn');
    const resetBtn = document.getElementById('reset-btn');
    const playerPanel = document.getElementById('player-panel');
    const tabText = document.getElementById('tab-text');
    const tabSsml = document.getElementById('tab-ssml');
    const textEditor = document.getElementById('text-editor');
    const ssmlEditor = document.getElementById('ssml-editor');
    const notification = document.getElementById('notification');
    const notificationText = document.getElementById('notification-text');
    const notificationClose = document.getElementById('notification-close');
    const synthesizeSaveBtn = document.getElementById('synthesize-save-btn');
    const saveDirDisplay = document.getElementById('save-dir-display');
    const selectSaveDirBtn = document.getElementById('select-save-dir-btn');
  
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let isServerOnline = false;
    let isProcessing = false;
    let activeTab = 'text'; 
    let saveDirectoryPath = '';
  
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();
  
    async function init() {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è apiClient  
      if (typeof apiClient === 'undefined') {
        console.error("‚ùå apiClient –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω! –°–æ–∑–¥–∞—é –∑–∞–ø–∞—Å–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä");
        window.apiClient = new ApiClient();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–æ–≤—Å—é–¥—É
      }
      
      await checkServerStatus();
      if (isServerOnline) {
        await loadSpeakers();
      }

      loadSaveDirectory();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      setupEventListeners();
      
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
      setInterval(checkServerStatus, 10000);
    }

    async function loadSaveDirectory() {
      try {
        saveDirectoryPath = await apiClient.getSaveDirectory();
        updateSaveDirectoryDisplay();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      }
    }

    function updateSaveDirectoryDisplay() {
      if (saveDirectoryPath) {
        saveDirDisplay.value = saveDirectoryPath;
        // –í–∫–ª—é—á–∞–µ–º –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
        synthesizeSaveBtn.disabled = !isServerOnline;
      } else {
        saveDirDisplay.value = '';
        saveDirDisplay.placeholder = '–ù–µ –≤—ã–±—Ä–∞–Ω–∞';
      }
    }
  
    async function checkServerStatus() {
      try {
        if (typeof apiClient === 'undefined') {
          console.error("‚ùå apiClient –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ checkServerStatus");
          isServerOnline = false;
          return;
        }
        isServerOnline = await apiClient.checkServerStatus();
      } catch (error) {
        console.error("üí£ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", error);
        isServerOnline = false;
      }
      updateServerStatus();
    }
  
    function updateServerStatus() {
      if (isServerOnline) {
        statusDot.classList.remove('offline');
        statusDot.classList.add('online');
        statusText.textContent = '–°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω';
        synthesizeBtn.disabled = false;
        synthesizeSaveBtn.disabled = false; 
      } else {
        statusDot.classList.remove('online');
        statusDot.classList.add('offline');
        statusText.textContent = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        synthesizeBtn.disabled = true;
        synthesizeSaveBtn.disabled = true;
      }
    }
  
    async function loadSpeakers() {
      const speakers = await apiClient.getSpeakers();
      
      // –û—á–∏—â–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
      speakerSelect.innerHTML = '';
      
      if (speakers && speakers.length > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
        speakers.forEach(speaker => {
          const option = document.createElement('option');
          option.value = speaker;
          option.textContent = speaker;
          speakerSelect.appendChild(option);
        });
        
        speakerSelect.disabled = false;
      } else {
        const option = document.createElement('option');
        option.value = '';
        option.textContent = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤';
        speakerSelect.appendChild(option);
        speakerSelect.disabled = true;
      }
    }
  
    function setupEventListeners() {
      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
      tabText.addEventListener('click', () => switchTab('text'));
      tabSsml.addEventListener('click', () => switchTab('ssml'));
      
      // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      synthesizeBtn.addEventListener('click', handleSynthesize);
      clearBtn.addEventListener('click', handleClear);
      saveBtn.addEventListener('click', handleSave);
      resetBtn.addEventListener('click', handleReset);
      synthesizeSaveBtn.addEventListener('click', handleSynthesizeAndSave);
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      notificationClose.addEventListener('click', hideNotification);

      // –°—á–µ—Ç—á–∏–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
      textInput.addEventListener('input', updateCharCounter);
      ssmlInput.addEventListener('input', updateCharCounter);

      selectSaveDirBtn.addEventListener('click', async () => {
        try {
          const result = await apiClient.selectSaveDirectory();
          if (result && result.success) {
            saveDirectoryPath = result.path;
            updateSaveDirectoryDisplay();
            showNotification(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${result.path}`, 'success');
          }
        } catch (error) {
          showNotification(`–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error.message}`, 'error');
        }
      });

      // SSML-–∫–Ω–æ–ø–∫–∏ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–≥–æ–≤
      document.getElementById('insert-speak-btn').addEventListener('click', () => {
        insertSsmlTag('<speak>', '</speak>');
      });

      document.getElementById('insert-break-btn').addEventListener('click', () => {
        insertSsmlTag('<break time="500ms"/>', '');
      });

      document.getElementById('insert-emphasis-btn').addEventListener('click', () => {
        insertSsmlTag('<emphasis level="strong">', '</emphasis>');
      });

      document.getElementById('insert-prosody-btn').addEventListener('click', () => {
        insertSsmlTag('<prosody rate="slow">', '</prosody>');
      });

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞
      document.getElementById('load-text-btn').addEventListener('click', loadTextFromFile);
    }
  
    function switchTab(tabName) {
      activeTab = tabName;
      
      if (tabName === 'text') {
        tabText.classList.add('active');
        tabSsml.classList.remove('active');
        textEditor.classList.remove('hidden');
        ssmlEditor.classList.add('hidden');
      } else {
        tabText.classList.remove('active');
        tabSsml.classList.add('active');
        textEditor.classList.add('hidden');
        ssmlEditor.classList.remove('hidden');
      }
    }

    async function handleSynthesize() {
      if (!isServerOnline || isProcessing) return;
      
      const text = activeTab === 'text' ? textInput.value : ssmlInput.value;
      if (!text.trim()) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞', 'error');
        return;
      }
      
      try {
        isProcessing = true;
        synthesizeBtn.disabled = true;
        synthesizeBtn.textContent = '–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º...';
        
        const speaker = speakerSelect.value;
        const sampleRate = parseInt(sampleRateSelect.value);
        const useSSML = activeTab === 'ssml';
        
        const result = await apiClient.synthesize(text, speaker, sampleRate, useSSML);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        const audioUrl = apiClient.getAudioUrl(result.filename);
        console.log("–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ:", audioUrl);
        
        const player = document.getElementById('audio-player');
        player.src = audioUrl;
        player.load();
        player.onloadedmetadata = function() {
          console.log("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å =", player.duration);
        };
        playerPanel.classList.remove('hidden');
        
        showNotification('–°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
      } catch (error) {
        showNotification(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: ${error.message}`, 'error');
      } finally {
        isProcessing = false;
        synthesizeBtn.disabled = false;
        synthesizeBtn.textContent = '–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å';
      }
    }
  
    function handleClear() {
      if (activeTab === 'text') {
        textInput.value = '';
      } else {
        ssmlInput.value = '<speak></speak>';
      }
    }
  
    async function handleSave() {
      try {
        const savedPath = await apiClient.saveAudioFile();
        if (savedPath) {
          showNotification(`–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${savedPath}`, 'success');
        }
      } catch (error) {
        showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
      }
    }
  
    function handleReset() {
      audioPlayer.reset();
      playerPanel.classList.add('hidden');
    }
  
    function showNotification(message, type = 'info') {
      notificationText.textContent = message;
      notification.className = 'notification show';
      
      if (type === 'error') {
        notification.classList.add('error');
      } else if (type === 'success') {
        notification.classList.add('success');
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        hideNotification();
      }, 5000);
    }

    async function handleSynthesizeAndSave() {
      if (!isServerOnline || isProcessing) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω–∞ –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      if (!saveDirectoryPath) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
        return;
      }
      
      const text = activeTab === 'text' ? textInput.value : ssmlInput.value;
      if (!text.trim()) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞', 'error');
        return;
      }
      
      try {
        isProcessing = true;
        synthesizeBtn.disabled = true;
        synthesizeSaveBtn.disabled = true;
        synthesizeSaveBtn.textContent = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...';
        
        const speaker = speakerSelect.value;
        const sampleRate = parseInt(sampleRateSelect.value);
        const useSSML = activeTab === 'ssml';
        
        // –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        const result = await apiClient.synthesize(text, speaker, sampleRate, useSSML);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        const saveResult = await window.api.saveAudioToDirectory(result.path, saveDirectoryPath);
        
        if (saveResult && saveResult.success) {
          showNotification(`–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${saveResult.path}`, 'success');
        } else {
          throw new Error(saveResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª');
        }
      } catch (error) {
        showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`, 'error');
      } finally {
        isProcessing = false;
        synthesizeBtn.disabled = false;
        synthesizeSaveBtn.disabled = !saveDirectoryPath;
        synthesizeSaveBtn.textContent = '–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å';
      }
    }

    function updateCharCounter() {
      const textCounter = document.getElementById('text-char-counter');
      const ssmlCounter = document.getElementById('ssml-char-counter');
      
      if (textCounter) {
        const charCount = textInput.value.length;
        textCounter.textContent = `${charCount} —Å–∏–º–≤–æ–ª–æ–≤`;
      }
      
      if (ssmlCounter) {
        const charCount = ssmlInput.value.length;
        ssmlCounter.textContent = `${charCount} —Å–∏–º–≤–æ–ª–æ–≤`;
      }
    }
    
    function insertSsmlTag(openTag, closeTag) {
      const textarea = ssmlInput;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selectedText = textarea.value.substring(start, end);
      
      // –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <break/>)
      if (!closeTag) {
        textarea.value = textarea.value.substring(0, start) + openTag + textarea.value.substring(end);
        textarea.selectionStart = start + openTag.length;
        textarea.selectionEnd = start + openTag.length;
      } else {
        textarea.value = textarea.value.substring(0, start) + openTag + selectedText + closeTag + textarea.value.substring(end);
        textarea.selectionStart = start + openTag.length;
        textarea.selectionEnd = start + openTag.length + selectedText.length;
      }
      
      textarea.focus();
      updateCharCounter();
    }
    
    async function loadTextFromFile() {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Electron API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        const result = await window.api.loadTextFromFile();
        
        if (result && result.content) {
          if (activeTab === 'text') {
            textInput.value = result.content;
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç SSML
            const content = result.content.trim();
            if (content.startsWith('<speak') && content.endsWith('</speak>')) {
              ssmlInput.value = content;
            } else {
              ssmlInput.value = `<speak>${content}</speak>`;
            }
          }
          updateCharCounter();
          showNotification(`–¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ ${result.filePath}`, 'success');
        }
      } catch (error) {
        showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: ${error.message}`, 'error');
      }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateCharCounter();
  
    function hideNotification() {
      notification.className = 'notification';
    }
  });