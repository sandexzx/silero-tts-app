// –ü—É—Ç—å: /home/zverev/sandbox/Electron/silero-tts-app/frontend/renderer/scripts/app.js
document.addEventListener('DOMContentLoaded', () => {
    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const statusDot = document.querySelector('.status-dot');
    const statusText = document.getElementById('status-text');
    const speakerSelect = document.getElementById('speaker-select');
    const sampleRateSelect = document.getElementById('sample-rate-select');
    const ssmlToggle = document.getElementById('ssml-toggle');
    const textInput = document.getElementById('text-input');
    const ssmlInput = document.getElementById('ssml-input');
    const synthesizeBtn = document.getElementById('synthesize-btn');
    const clearBtn = document.getElementById('clear-btn');
    const saveBtn = document.getElementById('save-btn');
    const resetBtn = document.getElementById('reset-btn');
    const playerPanel = document.getElementById('player-panel');
    const tabText = document.getElementById('tab-text');
    const tabSsml = document.getElementById('tab-ssml');
    const textEditor = document.getElementById('text-editor');
    const ssmlEditor = document.getElementById('ssml-editor');
    const notification = document.getElementById('notification');
    const notificationText = document.getElementById('notification-text');
    const notificationClose = document.getElementById('notification-close');
    const synthesizeSaveBtn = document.getElementById('synthesize-save-btn');
  
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let isServerOnline = false;
    let isProcessing = false;
    let activeTab = 'text'; // 'text' –∏–ª–∏ 'ssml'
  
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();
  
    async function init() {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è apiClient  
      if (typeof apiClient === 'undefined') {
        console.error("‚ùå apiClient –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω! –°–æ–∑–¥–∞—é –∑–∞–ø–∞—Å–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä");
        window.apiClient = new ApiClient();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–æ–≤—Å—é–¥—É
      }
      
      await checkServerStatus();
      if (isServerOnline) {
        await loadSpeakers();
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      setupEventListeners();
      
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
      setInterval(checkServerStatus, 10000);
    }
  
    async function checkServerStatus() {
      try {
        if (typeof apiClient === 'undefined') {
          console.error("‚ùå apiClient –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ checkServerStatus");
          isServerOnline = false;
          return;
        }
        isServerOnline = await apiClient.checkServerStatus();
      } catch (error) {
        console.error("üí£ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", error);
        isServerOnline = false;
      }
      updateServerStatus();
    }
  
    function updateServerStatus() {
      if (isServerOnline) {
        statusDot.classList.remove('offline');
        statusDot.classList.add('online');
        statusText.textContent = '–°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω';
        synthesizeBtn.disabled = false;
        synthesizeSaveBtn.disabled = false; 
      } else {
        statusDot.classList.remove('online');
        statusDot.classList.add('offline');
        statusText.textContent = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        synthesizeBtn.disabled = true;
        synthesizeSaveBtn.disabled = true;
      }
    }
  
    async function loadSpeakers() {
      const speakers = await apiClient.getSpeakers();
      
      // –û—á–∏—â–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
      speakerSelect.innerHTML = '';
      
      if (speakers && speakers.length > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
        speakers.forEach(speaker => {
          const option = document.createElement('option');
          option.value = speaker;
          option.textContent = speaker;
          speakerSelect.appendChild(option);
        });
        
        speakerSelect.disabled = false;
      } else {
        const option = document.createElement('option');
        option.value = '';
        option.textContent = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤';
        speakerSelect.appendChild(option);
        speakerSelect.disabled = true;
      }
    }
  
    function setupEventListeners() {
      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
      tabText.addEventListener('click', () => switchTab('text'));
      tabSsml.addEventListener('click', () => switchTab('ssml'));
      
      // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ SSML
      ssmlToggle.addEventListener('change', handleSsmlToggle);
      
      // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      synthesizeBtn.addEventListener('click', handleSynthesize);
      clearBtn.addEventListener('click', handleClear);
      saveBtn.addEventListener('click', handleSave);
      resetBtn.addEventListener('click', handleReset);
      synthesizeSaveBtn.addEventListener('click', handleSynthesizeAndSave);
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      notificationClose.addEventListener('click', hideNotification);
    }
  
    function switchTab(tabName) {
      activeTab = tabName;
      
      if (tabName === 'text') {
        tabText.classList.add('active');
        tabSsml.classList.remove('active');
        textEditor.classList.remove('hidden');
        ssmlEditor.classList.add('hidden');
        ssmlToggle.checked = false;
      } else {
        tabText.classList.remove('active');
        tabSsml.classList.add('active');
        textEditor.classList.add('hidden');
        ssmlEditor.classList.remove('hidden');
        ssmlToggle.checked = true;
      }
    }
  
    function handleSsmlToggle() {
      if (ssmlToggle.checked) {
        switchTab('ssml');
      } else {
        switchTab('text');
      }
    }
  
    async function handleSynthesize() {
      if (!isServerOnline || isProcessing) return;
      
      const text = activeTab === 'text' ? textInput.value : ssmlInput.value;
      if (!text.trim()) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞', 'error');
        return;
      }
      
      try {
        isProcessing = true;
        synthesizeBtn.disabled = true;
        synthesizeBtn.textContent = '–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º...';
        
        const speaker = speakerSelect.value;
        const sampleRate = parseInt(sampleRateSelect.value);
        const useSSML = activeTab === 'ssml';
        
        const result = await apiClient.synthesize(text, speaker, sampleRate, useSSML);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        audioPlayer.setAudioSource(apiClient.getAudioUrl(result.filename));
        playerPanel.classList.remove('hidden');
        
        showNotification('–°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
      } catch (error) {
        showNotification(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: ${error.message}`, 'error');
      } finally {
        isProcessing = false;
        synthesizeBtn.disabled = false;
        synthesizeBtn.textContent = '–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å';
      }
    }
  
    function handleClear() {
      if (activeTab === 'text') {
        textInput.value = '';
      } else {
        ssmlInput.value = '<speak></speak>';
      }
    }
  
    async function handleSave() {
      try {
        const savedPath = await apiClient.saveAudioFile();
        if (savedPath) {
          showNotification(`–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${savedPath}`, 'success');
        }
      } catch (error) {
        showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
      }
    }
  
    function handleReset() {
      audioPlayer.reset();
      playerPanel.classList.add('hidden');
    }
  
    function showNotification(message, type = 'info') {
      notificationText.textContent = message;
      notification.className = 'notification show';
      
      if (type === 'error') {
        notification.classList.add('error');
      } else if (type === 'success') {
        notification.classList.add('success');
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        hideNotification();
      }, 5000);
    }

    async function handleSynthesizeAndSave() {
      if (!isServerOnline || isProcessing) return;
      
      const text = activeTab === 'text' ? textInput.value : ssmlInput.value;
      if (!text.trim()) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞', 'error');
        return;
      }
      
      try {
        isProcessing = true;
        synthesizeBtn.disabled = true;
        synthesizeSaveBtn.disabled = true;
        synthesizeSaveBtn.textContent = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...';
        
        const speaker = speakerSelect.value;
        const sampleRate = parseInt(sampleRateSelect.value);
        const useSSML = activeTab === 'ssml';
        
        const savedPath = await apiClient.synthesizeAndSave(text, speaker, sampleRate, useSSML);
        
        if (savedPath) {
          showNotification(`–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${savedPath}`, 'success');
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª');
        }
      } catch (error) {
        showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`, 'error');
      } finally {
        isProcessing = false;
        synthesizeBtn.disabled = false;
        synthesizeSaveBtn.disabled = false;
        synthesizeSaveBtn.textContent = '–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å';
      }
    }
  
    function hideNotification() {
      notification.className = 'notification';
    }
  });