// –ü—É—Ç—å: /home/zverev/sandbox/Electron/silero-tts-app/frontend/renderer/scripts/api.js
class ApiClient {
  constructor() {
    // –ù–∞–¥–µ–∂–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π 
    if (!window.api || !window.api.API_URL) {
      console.error("üî• window.api –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
      this.apiUrl = 'http://127.0.0.1:8000'; // –§–æ–ª–ª–±—ç–∫
    } else {
      this.apiUrl = window.api.API_URL;
    }
    this.lastSynthesisResult = null;
    console.log("üì° ApiClient —Å–æ–∑–¥–∞–Ω —Å URL:", this.apiUrl);
  }
  
    async checkServerStatus() {
      console.log("–ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Ä–≤–µ—Ä –ø–æ –∞–¥—Ä–µ—Å—É:", this.apiUrl + "/health"); // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      try {
        const health = await window.api.checkHealth(); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ preload
        console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (checkServerStatus):", health); // –û—Ç–ª–∞–¥–∫–∞

        // [!!!] –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê [!!!]
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏–º–µ–Ω–Ω–æ 'ok'
        if (health && typeof health === 'object' && health.status === 'ok') {
          console.log("–°–µ—Ä–≤–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–æ–¥—Ä—è—á–∫–æ–º! ‚úÖ"); // –û–±–Ω–æ–≤–∏–º –ª–æ–≥ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
          return true; // –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
        } else {
          // –õ–æ–≥–∏—Ä—É–µ–º, –ø–æ—á–µ–º—É —Å—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
          if (!health) {
            console.log("–û—Ç–≤–µ—Ç –æ—Ç checkHealth –ø—É—Å—Ç–æ–π.");
          } else if (typeof health !== 'object') {
            console.log("–û—Ç–≤–µ—Ç –æ—Ç checkHealth –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º:", health);
          } else {
            console.log("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ 'ok':", health.status, "| –î–µ—Ç–∞–ª–∏:", health.error || '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π');
          }
          return false; // –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
        }
      } catch (error) { // –≠—Ç–∞ –æ—à–∏–±–∫–∞ –ª–æ–≤–∏—Ç—Å—è, –µ—Å–ª–∏ window.api.checkHealth –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑-–∑–∞ try/catch –≤–Ω—É—Ç—Ä–∏ preload)
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ window.api.checkHealth:', error);
        return false;
      }
    }
  
    async getSpeakers() {
      try {
        const response = await window.api.getSpeakers();
        if (response && response.speakers) {
          return response.speakers;
        }
        return [];
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤:', error);
        return [];
      }
    }
  
    async synthesize(text, speaker = 'xenia', sampleRate = 48000, useSSML = false) {
      try {
        const response = await window.api.synthesize(text, speaker, sampleRate, useSSML);
        
        if (response.error) {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç API:", response.error);
          throw new Error(response.error);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if (!response.filename) {
          console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API:", response);
          throw new Error("API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞");
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç response, —á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        // –Ω–æ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
        this.lastSynthesisResult = {
          filename: response.filename,
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        };
        
        console.log("–°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω, –∏–º—è —Ñ–∞–π–ª–∞:", response.filename);
        return this.lastSynthesisResult;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', error);
        throw error;
      }
    }
  
    async saveAudioFile() {
      if (!this.lastSynthesisResult || !this.lastSynthesisResult.path) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
  
      try {
        const savedPath = await window.api.saveAudioFile(this.lastSynthesisResult.path);
        return savedPath;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞:', error);
        throw error;
      }
    }

    async synthesizeAndSave(text, speaker = 'xenia', sampleRate = 48000, useSSML = false) {
      try {
        const result = await window.api.synthesizeAndSave(text, speaker, sampleRate, useSSML);
        return result;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
        throw error;
      }
    }

    // –î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å ApiClient
    async selectSaveDirectory() {
      try {
        const result = await window.api.selectSaveDirectory();
        return result;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
        throw error;
      }
    }

    async getSaveDirectory() {
      try {
        const result = await window.api.getSaveDirectory();
        return result.path;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
        return '';
      }
    }

    async saveAudioToDirectory(directoryPath) {
      if (!this.lastSynthesisResult || !this.lastSynthesisResult.path) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }

      try {
        const result = await window.api.saveAudioToDirectory(
          this.lastSynthesisResult.path, 
          directoryPath
        );
        return result;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:', error);
        throw error;
      }
    }
    
    getAudioUrl(filename) {
      return `${window.api.API_URL}/audio/${filename}`;
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
  const apiClient = new ApiClient();